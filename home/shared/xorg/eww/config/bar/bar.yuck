; Begin vars
(defvar time_rev false)

(defpoll clock_time :interval "5s" "date +%H:%M")
(defpoll clock_date :interval "1h" :run-while time_rev "date +%d/%m/%Y")

(deflisten player_active :initial "" "playerctl metadata -F -f \"{{emoji(status)}}\"")
; End vars

(defwidget separator []
  (box :class "separator_class"
    (label :class "sep_class" :text "|")))

(defwidget distro_launcher_module []
  (eventbox :onclick "notify-send \"guh\""
    :cursor "pointer"
    (box :class "wrapper_box" :space-evenly false :orientation "h"
      (label :class "distro_logo_class" :text "distro_logo"))))

(defwidget clock_module []
  (eventbox :onclick "${EWW_CMD} update time_rev=${!time_rev}"
    :cursor "pointer"
    (box :class "wrapper_box" :space-evenly false :orientation "h"
      (label :class "clock_time_class" :text clock_time)
      (revealer :transition "slideleft"
        :reveal time_rev
        :duration "350ms"
        (label :class "clock_date_class" :text clock_date)))))

(defwidget player_module []
  (box :class "wrapper_box" :space-evenly false :orientation "h"
    (label :class "player_class" :text player_active)))

(defwidget network_module []
  (box :class "wrapper_box" :space-evenly false :orientation "h"
    (label :class "network_class" :text "TODO"))) ; TODO

(defwidget sys_module []
  (box :class "wrapper_box" :space-evenly false :orientation "h"
    (box :class "sys_stats_class" :space-evenly false :orientation "h"
      (label :class "disk_usage_class" :text "Disk: ${round(EWW_DISK["/"]["used_perc"], 0)}%")
      (separator)
      (label :class "cpu_usage_class" :text "Cpu: ${round(EWW_CPU["avg"], 0)}%")
      (separator)
      (label :class "ram_usage_class" :text "Ram: ${round(EWW_RAM["used_mem_perc"], 0)}%")
      (separator)
      (label :class "battery_class" :text "Bat: ${EWW_BATTERY["BAT0"]["capacity"]}%"))))

(defwidget left []
  (box :orientation "h"
    :space-envely false
    :halign "start"
    :class "left_modules"
    (distro_launcher_module)
    (label :text "(workspaces)")
    (label :text "(window name)")
))

(defwidget center []
  (box :orientation "h"
    :space-envely false
    :halign "center"
    :class "center_modules"
    (clock_module)
    (player_module)))

(defwidget right []
  (box :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (label :text "(vol)")
    (separator)
    (network_module)
    (separator)
    (sys_module)))

(defwindow bar
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "100%"
                        :height "4%"
                        :anchor "top center")
    :reserve (struts :distance "4%" :side "top")
    :stacking "bg"
    :window-type "desktop"
    :wm-ignore false
    (centerbox :class "bar_class" :orientation "h"
      (left)
      (center)
      (right)))

* Keybinds :3

#+begin_src emacs-lisp

  (require 'meow)
  (require 'multiple-cursors)
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))

#+end_src

** Leader keys

Like modal editors, you have a Leader key (SPC in our case) which can be followed
by other keys to access "sub-menus"

They are pretty simple to remember
e.g:
  avy-goto-char == <leader> a g c
  avy-kill-region == <leader> a k r

#+begin_src emacs-lisp

  (meow-leader-define-key
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("a g c" . avy-goto-char-2)
   '("a g w" . avy-goto-word-1)
   '("a k l" . avy-kill-whole-line)
   '("a k L" . avy-kill-ring-save-whole-line)
   '("a k r" . avy-kill-region)
   '("a k R" . avy-kill-ring-save-region)
   '("a m l" . avy-move-line)
   '("a m r" . avy-move-line)
   '("a y l" . avy-copy-line)
   '("a y r" . avy-copy-region)
   '("?" . meow-cheatsheet))

#+end_src

** Normal mode keybinds
The ones you use the most, they function in reverse of vim (a bit like helix)
it goes like <initial selection><repetition><action>

I took some creative freedom when I couldn't replicate 1:1 or when I didn't feel like it

Still very much WIP

#+begin_src emacs-lisp
    
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '("_" . meow-reverse)
     '(";" . meow-cancel-selection)
     '(":" . meow-goto-line)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-line) ; TODO: Find a way to append after moving
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-kill)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-join) ; TODO: Find a way to append after moving
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("M" . meow-mcursors-mode)
     '("n" . meow-search)
     '("o" . meow-open-below)
     '("O" . meow-open-above)
     '("p" . meow-yank)
     '("r" . meow-replace)
     '("s" . meow-visit)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . undo-redo)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("y" . meow-save)
     '("'" . repeat)
     '("<escape>" . ignore))

#+end_src

** Multi cursors with meow
In an attempt to re-create the oh-so almighty Helix keybinds,
here are multicursors, stored in a meow state, activated with

You need to duplicate normal bindings, as I'm too stupid to find a
smarter way.

#+begin_src emacs-lisp

  (setq meow-mcursors-keymap (make-keymap))
  (meow-define-state mcursors
    "Meow state for using multi-cursors"
    :lighter " [MC]"
    :keymap meow-mcursors-keymap)
  (meow-define-keys 'mcursors
    '("0" . meow-expand-0)
    '("9" . meow-expand-9)
    '("8" . meow-expand-8)
    '("7" . meow-expand-7)
    '("6" . meow-expand-6)
    '("5" . meow-expand-5)
    '("4" . meow-expand-4)
    '("3" . meow-expand-3)
    '("2" . meow-expand-2)
    '("1" . meow-expand-1)
    '("-" . negative-argument)
    '("_" . meow-reverse)
    '(";" . meow-cancel-selection)
    '("," . meow-inner-of-thing)
    '("." . meow-bounds-of-thing)
    '("[" . meow-beginning-of-thing)
    '("]" . meow-end-of-thing)
    '("a" . meow-append)
    '("A" . meow-line) ; TODO: Find a way to append after moving
    '("b" . meow-back-word)
    '("B" . meow-back-symbol)
    '("c" . meow-change)
    '("C" . mc/mark-next-lines)
    '("d" . meow-kill)
    '("D" . meow-backward-delete)
    '("e" . meow-next-word)
    '("E" . meow-next-symbol)
    '("h" . meow-left)
    '("H" . meow-left-expand)
    '("i" . meow-insert)
    '("I" . meow-join) ; TODO: Find a way to append after moving
    '("j" . meow-next)
    '("J" . meow-next-expand)
    '("k" . meow-prev)
    '("K" . meow-prev-expand)
    '("l" . meow-right)
    '("L" . meow-right-expand)
    '("n" . mc/mark-next-like-this)
    '("N" . mc/unmark-next-like-this)
    '("o" . meow-open-below)
    '("O" . meow-open-above)
    '("p" . meow-yank)
    '("r" . meow-replace)
    '("t" . meow-till)
    '("u" . meow-undo)
    '("U" . undo-redo)
    '("x" . meow-line)
    '("<escape>" . meow-normal-mode)))

  (meow-setup)
  (setq meow-use-cursor-position-hack t)
  (meow-global-mode 1)

  (setq mc/always-run-for-all 1)
#+end_src

** General keys, independant of meow or mc
I mostly use meow keys, so I can just overwrite existing emacs
keys without it being too much of a hassle.

#+begin_src emacs-lisp

#+end_src
